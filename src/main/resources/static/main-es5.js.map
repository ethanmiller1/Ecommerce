{"version":3,"sources":["webpack:///src/app/components/cart-details/cart-details.component.ts","webpack:///src/app/components/cart-details/cart-details.component.html","webpack:///src/app/common/order.ts","webpack:///src/environments/environment.ts","webpack:///src/app/common/purchase.ts","webpack:///src/app/services/product.service.ts","webpack:///src/app/services/luv2-shop-form.service.ts","webpack:///src/app/common/cart-item.ts","webpack:///src/app/components/checkout/checkout.component.ts","webpack:///src/app/components/checkout/checkout.component.html","webpack:///src/app/components/search/search.component.ts","webpack:///src/app/components/search/search.component.html","webpack:///src/app/services/checkout.service.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/common/product.ts","webpack:///src/app/common/order-item.ts","webpack:///src/app/components/cart-status/cart-status.component.ts","webpack:///src/app/components/cart-status/cart-status.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/product-category-menu/product-category-menu.component.ts","webpack:///src/app/components/product-category-menu/product-category-menu.component.html","webpack:///src/app/components/product-details/product-details.component.ts","webpack:///src/app/components/product-details/product-details.component.html","webpack:///src/app/components/product-list/product-list.component.ts","webpack:///src/app/components/product-list/product-list-grid.component.html","webpack:///src/app/services/cart.service.ts","webpack:///src/app/validators/luv2-shop-validators.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["CartDetailsComponent","cartService","cartItems","totalPrice","totalQuantity","listCartDetails","subscribe","data","computeCartTotals","theCartItem","addToCart","decrementQuantity","remove","selector","templateUrl","styleUrls","Order","environment","production","baseUrl","Purchase","ProductService","httpClient","categoryUrl","theProductId","productUrl","get","thePage","thePageSize","theCategoryId","searchUrl","getProducts","theKeyword","pipe","response","_embedded","products","productCategory","providedIn","Luv2ShopFormService","countriesUrl","statesUrl","countries","theCountryCode","searchStatesUrl","states","startMonth","theMonth","push","startYear","Date","getFullYear","endYear","theYear","CartItem","product","id","name","imageUrl","unitPrice","quantity","CheckoutComponent","formBuilder","luv2ShopFormService","checkoutService","router","creditCardYears","creditCardMonths","shippingAddressStates","billingAddressStates","reviewCartDetails","checkoutFormGroup","group","customer","firstName","required","minLength","notOnlyWhitespace","lastName","email","pattern","shippingAddress","street","city","state","country","zipCode","billingAddress","creditCard","cardType","nameOnCard","cardNumber","securityCode","expirationMonth","expirationYear","getMonth","console","log","getCreditCardMonths","JSON","stringify","getCreditCardYears","getCountries","event","target","checked","controls","setValue","value","reset","invalid","markAllAsTouched","order","orderItems","map","tempCartItem","purchase","shippingState","parse","shippingCountry","billingState","billingCountry","placeOrder","next","alert","orderTrackingNumber","resetCart","error","err","message","navigateByUrl","creditCardFormGroup","currentYear","selectedYear","Number","formGroupName","formGroup","countryCode","code","countryName","getStates","onSubmit","copyShippingAddressToBillingAddress","handleMonthsAndYears","SearchComponent","doSearch","CheckoutService","purchaseUrl","post","AppComponent","title","Product","OrderItem","cartItem","productId","CartStatusComponent","updateCartStatus","routes","path","component","redirectTo","pathMatch","AppModule","forRoot","declarations","imports","providers","bootstrap","ProductCategoryMenuComponent","productService","listProductCategories","getProductCategories","productCategories","ProductDetailsComponent","route","paramMap","handleProductDetails","snapshot","getProduct","ProductListComponent","currentCategoryId","previousCategoryId","searchMode","thePageNumber","theTotalElements","previousKeyword","listProducts","has","handleSearchProducts","handleListProducts","searchProductsPaginate","processResult","hasCategoryId","getProductListPaginate","page","number","size","totalElements","pageSize","theProduct","updatePageSize","CartService","alreadyExistsInCart","existingCartItem","undefined","length","find","totalPriceValue","totalQuantityValue","currentCartItem","logCartData","subTotalPrice","toFixed","itemIndex","findIndex","splice","Luv2ShopValidators","control","trim","bootstrapModule","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","keys","module","exports"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { CartItem } from 'src/app/common/cart-item';\nimport { CartService } from 'src/app/services/cart.service';\n\n@Component({\n  selector: 'app-cart-details',\n  templateUrl: './cart-details.component.html',\n  styleUrls: ['./cart-details.component.css']\n})\nexport class CartDetailsComponent implements OnInit {\n\n  cartItems: CartItem[] = [];\n  totalPrice: number = 0;\n  totalQuantity: number = 0;\n\n  constructor(private cartService: CartService) { }\n\n  ngOnInit(): void {\n    this.listCartDetails();\n  }\n\n  listCartDetails() {\n\n    // get a handle to the cart items\n    this.cartItems = this.cartService.cartItems;\n\n    // subscribe to the cart totalPrice\n    this.cartService.totalPrice.subscribe(\n      data => this.totalPrice = data\n    );\n\n    // subscribe to the cart totalQuantity\n    this.cartService.totalQuantity.subscribe( \n      data => this.totalQuantity = data\n    );\n\n    // compute cart total price and quantity\n    this.cartService.computeCartTotals();\n  }\n\n  incrementQuantity(theCartItem: CartItem) {\n    this.cartService.addToCart(theCartItem);\n  }\n\n  decrementQuantity(theCartItem: CartItem) {\n    this.cartService.decrementQuantity(theCartItem);\n  }\n\n  remove(theCartItem: CartItem) {\n    this.cartService.remove(theCartItem);\n  }\n}\n","<div class=\"main-content\">\n    <div class=\"section-content section-content-p30\">\n        <div class=\"container-fluid\">\n\n            <div *ngIf=\"cartItems.length > 0\">\n\n                <table class=\"table table-bordered\">\n                    <tr>\n                        <th width=\"20%\">Product Image</th>\n                        <th width=\"50%\">Product Detail</th>\n                        <th width=\"30%\"></th>\n                    </tr>\n\n                    <tr *ngFor=\"let tempCartItem of cartItems\">\n                        <td>\n                            <img src=\"{{ tempCartItem.imageUrl }}\" class=\"img-responsive\" width=\"150px\" />\n                        </td>\n                        <td>\n                            <p>{{ tempCartItem.name }}</p>\n                            <p>{{ tempCartItem.unitPrice | currency: 'USD' }}</p>\n                        </td>\n                        <td>\n                            <div class=\"items\">\n                                <label>Quantity:</label>\n\n                                <div class=\"row no-gutters\">\n                                    <div class=\"col\">\n                                        <button (click)=\"incrementQuantity(tempCartItem)\" class=\"btn btn-primary btn-sm\">\n                                            <i class=\"fas fa-plus\"></i>\n                                        </button>\n                                    </div>\n\n                                    <div class=\"col ml-4 mr-2\">\n                                        {{ tempCartItem.quantity }}\n                                    </div>\n\n                                    <div class=\"col\">\n                                        <button (click)=\"decrementQuantity(tempCartItem)\" class=\"btn btn-primary btn-sm\">\n                                            <i class=\"fas fa-minus\"></i>\n                                        </button>\n                                    </div>\n\n                                    <div class=\"col-8\"></div>\n                                </div>\n\n                            </div>\n\n                            <button (click)=\"remove(tempCartItem)\" class=\"btn btn-primary btn-sm mt-2\">Remove</button>\n\n                            <p class=\"mt-2\">Subtotal: {{ tempCartItem.quantity * tempCartItem.unitPrice | currency: 'USD' }}</p>\n                        </td>\n                    </tr>\n\n                    <tr>\n                        <td colspan=\"2\"></td>\n                        <td style=\"font-weight: bold\">\n                            <p>Total Quantity: {{ totalQuantity }}</p>\n                            <p>Shipping: FREE</p>\n                            <p>Total Price: {{ totalPrice | currency: 'USD' }}</p>\n                            <a routerLink=\"/checkout\" class=\"btn btn-primary\">Checkout</a>\n                        </td>\n                    </tr>\n\n                </table>\n\n            </div>\n\n            <!-- if cart is empty then display a message -->\n            <div *ngIf=\"cartItems.length == 0\" class=\"alert alert-warning col-md-12\" role=\"alert\">\n                Your shopping cart is empty. \n            </div>\n\n        </div>\n    </div>\n</div>\n","export class Order {\n    totalQuantity: number;\n    totalPrice: number;\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  baseUrl: 'http://localhost:8080/'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { Address } from './address';\nimport { Customer } from './customer';\nimport { Order } from './order';\nimport { OrderItem } from './order-item';\n\nexport class Purchase {\n    customer: Customer;\n    shippingAddress: Address;\n    billingAddress: Address;\n    order: Order;\n    orderItems: OrderItem[]; \n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Product } from '../common/product';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ProductCategory } from '../common/product-category';\r\nimport {environment} from \"../../environments/environment\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProductService {\r\n\r\n  private baseUrl = environment.baseUrl + 'api/products';\r\n\r\n  private categoryUrl = environment.baseUrl + 'api/product-category';\r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  getProduct(theProductId: number): Observable<Product> {\r\n\r\n    // need to build URL based on product id\r\n    const productUrl = `${this.baseUrl}/${theProductId}`;\r\n\r\n    return this.httpClient.get<Product>(productUrl);\r\n  }\r\n\r\n  getProductListPaginate(thePage: number,\r\n                         thePageSize: number,\r\n                         theCategoryId: number): Observable<GetResponseProducts> {\r\n\r\n    // need to build URL based on category id, page and size\r\n    const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${theCategoryId}`\r\n                    + `&page=${thePage}&size=${thePageSize}`;\r\n\r\n    return this.httpClient.get<GetResponseProducts>(searchUrl);\r\n  }\r\n\r\n\r\n  getProductList(theCategoryId: number): Observable<Product[]> {\r\n\r\n    // need to build URL based on category id\r\n    const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${theCategoryId}`;\r\n\r\n    return this.getProducts(searchUrl);\r\n  }\r\n\r\n  searchProducts(theKeyword: string): Observable<Product[]> {\r\n\r\n    // need to build URL based on the keyword\r\n    const searchUrl = `${this.baseUrl}/search/findByNameContaining?name=${theKeyword}`;\r\n\r\n    return this.getProducts(searchUrl);\r\n  }\r\n\r\n  searchProductsPaginate(thePage: number,\r\n                        thePageSize: number,\r\n                        theKeyword: string): Observable<GetResponseProducts> {\r\n\r\n    // need to build URL based on keyword, page and size\r\n    const searchUrl = `${this.baseUrl}/search/findByNameContaining?name=${theKeyword}`\r\n                    + `&page=${thePage}&size=${thePageSize}`;\r\n\r\n    return this.httpClient.get<GetResponseProducts>(searchUrl);\r\n  }\r\n\r\n\r\n\r\n  private getProducts(searchUrl: string): Observable<Product[]> {\r\n    return this.httpClient.get<GetResponseProducts>(searchUrl).pipe(map(response => response._embedded.products));\r\n  }\r\n\r\n  getProductCategories(): Observable<ProductCategory[]> {\r\n\r\n    return this.httpClient.get<GetResponseProductCategory>(this.categoryUrl).pipe(\r\n      map(response => response._embedded.productCategory)\r\n    );\r\n  }\r\n\r\n}\r\n\r\ninterface GetResponseProducts {\r\n  _embedded: {\r\n    products: Product[];\r\n  },\r\n  page: {\r\n    size: number,\r\n    totalElements: number,\r\n    totalPages: number,\r\n    number: number\r\n  }\r\n}\r\n\r\ninterface GetResponseProductCategory {\r\n  _embedded: {\r\n    productCategory: ProductCategory[];\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { Country } from '../common/country';\nimport { map } from 'rxjs/operators';\nimport { State } from '../common/state';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Luv2ShopFormService {\n\n  private countriesUrl = 'http://localhost:8080/api/countries';\n  private statesUrl = 'http://localhost:8080/api/states';\n\n  constructor(private httpClient: HttpClient) { }\n\n  getCountries(): Observable<Country[]> {\n\n    return this.httpClient.get<GetResponseCountries>(this.countriesUrl).pipe(\n      map(response => response._embedded.countries)\n    );\n  }\n\n  getStates(theCountryCode: string): Observable<State[]> {\n\n    // search url\n    const searchStatesUrl = `${this.statesUrl}/search/findByCountryCode?code=${theCountryCode}`;\n\n    return this.httpClient.get<GetResponseStates>(searchStatesUrl).pipe(\n      map(response => response._embedded.states)\n    );\n  }\n\n\n  getCreditCardMonths(startMonth: number): Observable<number[]> {\n\n    let data: number[] = [];\n    \n    // build an array for \"Month\" dropdown list\n    // - start at current month and loop until \n\n    for (let theMonth = startMonth; theMonth <= 12; theMonth++) {\n      data.push(theMonth);\n    }\n\n    return of(data);\n  }\n\n  getCreditCardYears(): Observable<number[]> {\n\n    let data: number[] = [];\n\n    // build an array for \"Year\" downlist list\n    // - start at current year and loop for next 10 years\n    \n    const startYear: number = new Date().getFullYear();\n    const endYear: number = startYear + 10;\n\n    for (let theYear = startYear; theYear <= endYear; theYear++) {\n      data.push(theYear);\n    }\n\n    return of(data);\n  }\n\n}\n\ninterface GetResponseCountries {\n  _embedded: {\n    countries: Country[];\n  }\n}\n\ninterface GetResponseStates {\n  _embedded: {\n    states: State[];\n  }\n}","import { Product } from './product';\n\nexport class CartItem {\n\n    id: string;\n    name: string;\n    imageUrl: string;\n    unitPrice: number;\n\n    quantity: number;\n\n    constructor(product: Product) {\n        this.id = product.id;\n        this.name = product.name;\n        this.imageUrl = product.imageUrl;\n        this.unitPrice = product.unitPrice;\n\n        this.quantity = 1;\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Luv2ShopFormService } from 'src/app/services/luv2-shop-form.service';\nimport { Country } from 'src/app/common/country';\nimport { State } from 'src/app/common/state';\nimport { Luv2ShopValidators } from 'src/app/validators/luv2-shop-validators';\nimport { CartService } from 'src/app/services/cart.service';\nimport { CheckoutService } from 'src/app/services/checkout.service';\nimport { Router } from '@angular/router';\nimport { Order } from 'src/app/common/order';\nimport { OrderItem } from 'src/app/common/order-item';\nimport { Purchase } from 'src/app/common/purchase';\n\n@Component({\n  selector: 'app-checkout',\n  templateUrl: './checkout.component.html',\n  styleUrls: ['./checkout.component.css']\n})\nexport class CheckoutComponent implements OnInit {\n\n  checkoutFormGroup: FormGroup;\n\n  totalPrice: number = 0;\n  totalQuantity: number = 0;\n  \n  creditCardYears: number[] = [];\n  creditCardMonths: number[] = [];\n\n  countries: Country[] = [];\n\n  shippingAddressStates: State[] = [];\n  billingAddressStates: State[] = [];\n    \n  constructor(private formBuilder: FormBuilder,\n              private luv2ShopFormService: Luv2ShopFormService,\n              private cartService: CartService,\n              private checkoutService: CheckoutService,\n              private router: Router) { }\n\n  ngOnInit(): void {\n    \n    this.reviewCartDetails();\n\n    this.checkoutFormGroup = this.formBuilder.group({\n      customer: this.formBuilder.group({\n        firstName: new FormControl('', \n                              [Validators.required, \n                               Validators.minLength(2), \n                               Luv2ShopValidators.notOnlyWhitespace]),\n\n        lastName:  new FormControl('', \n                              [Validators.required, \n                               Validators.minLength(2), \n                               Luv2ShopValidators.notOnlyWhitespace]),\n                               \n        email: new FormControl('',\n                              [Validators.required, Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$')])\n      }),\n      shippingAddress: this.formBuilder.group({\n        street: new FormControl('', [Validators.required, Validators.minLength(2), \n                                     Luv2ShopValidators.notOnlyWhitespace]),\n        city: new FormControl('', [Validators.required, Validators.minLength(2), \n                                   Luv2ShopValidators.notOnlyWhitespace]),\n        state: new FormControl('', [Validators.required]),\n        country: new FormControl('', [Validators.required]),\n        zipCode: new FormControl('', [Validators.required, Validators.minLength(2), \n                                      Luv2ShopValidators.notOnlyWhitespace])\n      }),\n      billingAddress: this.formBuilder.group({\n        street: new FormControl('', [Validators.required, Validators.minLength(2), \n                                     Luv2ShopValidators.notOnlyWhitespace]),\n        city: new FormControl('', [Validators.required, Validators.minLength(2), \n                                   Luv2ShopValidators.notOnlyWhitespace]),\n        state: new FormControl('', [Validators.required]),\n        country: new FormControl('', [Validators.required]),\n        zipCode: new FormControl('', [Validators.required, Validators.minLength(2), \n                                      Luv2ShopValidators.notOnlyWhitespace])\n      }),\n      creditCard: this.formBuilder.group({\n        cardType: new FormControl('', [Validators.required]),\n        nameOnCard:  new FormControl('', [Validators.required, Validators.minLength(2), \n                                          Luv2ShopValidators.notOnlyWhitespace]),\n        cardNumber: new FormControl('', [Validators.required, Validators.pattern('[0-9]{16}')]),\n        securityCode: new FormControl('', [Validators.required, Validators.pattern('[0-9]{3}')]),\n        expirationMonth: [''],\n        expirationYear: ['']\n      })\n    });\n\n    // populate credit card months\n\n    const startMonth: number = new Date().getMonth() + 1;\n    console.log(\"startMonth: \" + startMonth);\n\n    this.luv2ShopFormService.getCreditCardMonths(startMonth).subscribe(\n      data => {\n        console.log(\"Retrieved credit card months: \" + JSON.stringify(data));\n        this.creditCardMonths = data;\n      }\n    );\n\n    // populate credit card years\n\n    this.luv2ShopFormService.getCreditCardYears().subscribe(\n      data => {\n        console.log(\"Retrieved credit card years: \" + JSON.stringify(data));\n        this.creditCardYears = data;\n      }\n    );\n\n    // populate countries\n\n    this.luv2ShopFormService.getCountries().subscribe(\n      data => {\n        console.log(\"Retrieved countries: \" + JSON.stringify(data));\n        this.countries = data;\n      }\n    );\n  }\n\n  reviewCartDetails() {\n\n    // subscribe to cartService.totalQuantity\n    this.cartService.totalQuantity.subscribe(\n      totalQuantity => this.totalQuantity = totalQuantity\n    );\n\n    // subscribe to cartService.totalPrice\n    this.cartService.totalPrice.subscribe(\n      totalPrice => this.totalPrice = totalPrice\n    );\n\n  }\n\n  get firstName() { return this.checkoutFormGroup.get('customer.firstName'); }\n  get lastName() { return this.checkoutFormGroup.get('customer.lastName'); }\n  get email() { return this.checkoutFormGroup.get('customer.email'); }\n\n  get shippingAddressStreet() { return this.checkoutFormGroup.get('shippingAddress.street'); }\n  get shippingAddressCity() { return this.checkoutFormGroup.get('shippingAddress.city'); }\n  get shippingAddressState() { return this.checkoutFormGroup.get('shippingAddress.state'); }\n  get shippingAddressZipCode() { return this.checkoutFormGroup.get('shippingAddress.zipCode'); }\n  get shippingAddressCountry() { return this.checkoutFormGroup.get('shippingAddress.country'); }\n\n  get billingAddressStreet() { return this.checkoutFormGroup.get('billingAddress.street'); }\n  get billingAddressCity() { return this.checkoutFormGroup.get('billingAddress.city'); }\n  get billingAddressState() { return this.checkoutFormGroup.get('billingAddress.state'); }\n  get billingAddressZipCode() { return this.checkoutFormGroup.get('billingAddress.zipCode'); }\n  get billingAddressCountry() { return this.checkoutFormGroup.get('billingAddress.country'); }\n\n  get creditCardType() { return this.checkoutFormGroup.get('creditCard.cardType'); }\n  get creditCardNameOnCard() { return this.checkoutFormGroup.get('creditCard.nameOnCard'); }\n  get creditCardNumber() { return this.checkoutFormGroup.get('creditCard.cardNumber'); }\n  get creditCardSecurityCode() { return this.checkoutFormGroup.get('creditCard.securityCode'); }\n\n\n\n  copyShippingAddressToBillingAddress(event) {\n\n    if (event.target.checked) {\n      this.checkoutFormGroup.controls.billingAddress\n            .setValue(this.checkoutFormGroup.controls.shippingAddress.value);\n\n      // bug fix for states\n      this.billingAddressStates = this.shippingAddressStates;\n\n    }\n    else {\n      this.checkoutFormGroup.controls.billingAddress.reset();\n\n      // bug fix for states\n      this.billingAddressStates = [];\n    }\n    \n  }\n\n  onSubmit() {\n    console.log(\"Handling the submit button\");\n\n    if (this.checkoutFormGroup.invalid) {\n      this.checkoutFormGroup.markAllAsTouched();\n      return;\n    }\n\n    // set up order\n    let order = new Order();\n    order.totalPrice = this.totalPrice;\n    order.totalQuantity = this.totalQuantity;\n\n    // get cart items\n    const cartItems = this.cartService.cartItems;\n\n    // create orderItems from cartItems\n    // - long way\n    /*\n    let orderItems: OrderItem[] = [];\n    for (let i=0; i < cartItems.length; i++) {\n      orderItems[i] = new OrderItem(cartItems[i]);\n    }\n    */\n\n    // - short way of doing the same thingy\n    let orderItems: OrderItem[] = cartItems.map(tempCartItem => new OrderItem(tempCartItem));\n\n    // set up purchase\n    let purchase = new Purchase();\n    \n    // populate purchase - customer\n    purchase.customer = this.checkoutFormGroup.controls['customer'].value;\n    \n    // populate purchase - shipping address\n    purchase.shippingAddress = this.checkoutFormGroup.controls['shippingAddress'].value;\n    const shippingState: State = JSON.parse(JSON.stringify(purchase.shippingAddress.state));\n    const shippingCountry: Country = JSON.parse(JSON.stringify(purchase.shippingAddress.country));\n    purchase.shippingAddress.state = shippingState.name;\n    purchase.shippingAddress.country = shippingCountry.name;\n\n    // populate purchase - billing address\n    purchase.billingAddress = this.checkoutFormGroup.controls['billingAddress'].value;\n    const billingState: State = JSON.parse(JSON.stringify(purchase.billingAddress.state));\n    const billingCountry: Country = JSON.parse(JSON.stringify(purchase.billingAddress.country));\n    purchase.billingAddress.state = billingState.name;\n    purchase.billingAddress.country = billingCountry.name;\n  \n    // populate purchase - order and orderItems\n    purchase.order = order;\n    purchase.orderItems = orderItems;\n\n    // call REST API via the CheckoutService\n    this.checkoutService.placeOrder(purchase).subscribe({\n        next: response => {\n          alert(`Your order has been received.\\nOrder tracking number: ${response.orderTrackingNumber}`);\n\n          // reset cart\n          this.resetCart();\n\n        },\n        error: err => {\n          alert(`There was an error: ${err.message}`);\n        }\n      }\n    );\n\n  }\n\n  resetCart() {\n    // reset cart data\n    this.cartService.cartItems = [];\n    this.cartService.totalPrice.next(0);\n    this.cartService.totalQuantity.next(0);\n    \n    // reset the form\n    this.checkoutFormGroup.reset();\n\n    // navigate back to the products page\n    this.router.navigateByUrl(\"/products\");\n  }\n\n  handleMonthsAndYears() {\n\n    const creditCardFormGroup = this.checkoutFormGroup.get('creditCard');\n\n    const currentYear: number = new Date().getFullYear();\n    const selectedYear: number = Number(creditCardFormGroup.value.expirationYear);\n\n    // if the current year equals the selected year, then start with the current month\n\n    let startMonth: number;\n\n    if (currentYear === selectedYear) {\n      startMonth = new Date().getMonth() + 1;\n    }\n    else {\n      startMonth = 1;\n    }\n\n    this.luv2ShopFormService.getCreditCardMonths(startMonth).subscribe(\n      data => {\n        console.log(\"Retrieved credit card months: \" + JSON.stringify(data));\n        this.creditCardMonths = data;\n      }\n    );\n  }\n\n  getStates(formGroupName: string) {\n\n    const formGroup = this.checkoutFormGroup.get(formGroupName);\n\n    const countryCode = formGroup.value.country.code;\n    const countryName = formGroup.value.country.name;\n\n    console.log(`${formGroupName} country code: ${countryCode}`);\n    console.log(`${formGroupName} country name: ${countryName}`);\n\n    this.luv2ShopFormService.getStates(countryCode).subscribe(\n      data => {\n\n        if (formGroupName === 'shippingAddress') {\n          this.shippingAddressStates = data; \n        }\n        else {\n          this.billingAddressStates = data;\n        }\n\n        // select first item by default\n        formGroup.get('state').setValue(data[0]);\n      }\n    );\n  }\n}\n","<div class=\"main-content page-m\">\n    <div class=\"section-content section-content-p30\">\n        <div class=\"container-fluid\">\n\n            <form [formGroup]=\"checkoutFormGroup\" (ngSubmit)=\"onSubmit()\">\n\n                <!-- customer form group -->\n                <div formGroupName=\"customer\" class=\"form-area\">\n                    <h3>Customer</h3>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>First Name</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <input formControlName=\"firstName\" type=\"text\">\n\n                                <div *ngIf=\"firstName.invalid && (firstName.dirty || firstName.touched)\" class=\"alert alert-danger mt-1\">\n\n                                    <div *ngIf=\"firstName.errors.required || firstName.errors.notOnlyWhitespace\">\n                                        First Name is required\n                                    </div>\n\n                                    <div *ngIf=\"firstName.errors.minlength\">\n                                        First Name must be at least 2 characters long\n                                    </div>\n\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>Last Name</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <input formControlName=\"lastName\" type=\"text\">\n\n                                <div *ngIf=\"lastName.invalid && (lastName.dirty || lastName.touched)\" class=\"alert alert-danger mt-1\">\n\n                                    <div *ngIf=\"lastName.errors.required || lastName.errors.notOnlyWhitespace\">\n                                        Last Name is required\n                                    </div>\n\n                                    <div *ngIf=\"lastName.errors.minlength\">\n                                        Last Name must be at least 2 characters long\n                                    </div>\n\n                                </div>\n                                \n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>Email</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <input formControlName=\"email\" type=\"text\">\n\n                                <div *ngIf=\"email.invalid && (email.dirty || email.touched)\" class=\"alert alert-danger mt-1\">\n\n                                    <div *ngIf=\"email.errors.required\">\n                                        Email is required\n                                    </div>\n\n                                    <div *ngIf=\"email.errors.pattern\">\n                                        Email must be a valid email address format\n                                    </div>\n\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n\n                <!-- shipping Address -->\n                <div formGroupName=\"shippingAddress\" class=\"form-area\">\n                    <h3>Shipping Address</h3>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>Country</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <select formControlName=\"country\" (change)=\"getStates('shippingAddress')\">\n                                    <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n                                        {{ country.name }}\n                                    </option>\n                                </select>\n\n                                <div *ngIf=\"shippingAddressCountry.invalid && (shippingAddressCountry.dirty || shippingAddressCountry.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"shippingAddressCountry.errors.required\">\n                                        Country is required\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>Street</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <input formControlName=\"street\" type=\"text\">\n\n                                <div *ngIf=\"shippingAddressStreet.invalid && (shippingAddressStreet.dirty || shippingAddressStreet.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"shippingAddressStreet.errors.required || shippingAddressStreet.errors.notOnlyWhitespace\">\n                                        Street is required\n                                    </div>\n                                    <div *ngIf=\"shippingAddressStreet.errors.minlength\">\n                                        Street must be at least 2 characters long\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>City</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <input formControlName=\"city\" type=\"text\">\n\n                                <div *ngIf=\"shippingAddressCity.invalid && (shippingAddressCity.dirty || shippingAddressCity.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"shippingAddressCity.errors.required || shippingAddressCity.errors.notOnlyWhitespace\">\n                                        City is required\n                                    </div>\n                                    <div *ngIf=\"shippingAddressCity.errors.minlength\">\n                                        City must be at least 2 characters long\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>State</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <select formControlName=\"state\">\n                                    <option *ngFor=\"let state of shippingAddressStates\" [ngValue]=\"state\">\n                                        {{ state.name }}\n                                    </option>\n                                </select>\n\n                                <div *ngIf=\"shippingAddressState.invalid && (shippingAddressState.dirty || shippingAddressState.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"shippingAddressState.errors.required\">\n                                        State is required\n                                    </div>\n                                </div>\n                                \n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>Zip Code</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <input formControlName=\"zipCode\" type=\"text\">\n\n                                <div *ngIf=\"shippingAddressZipCode.invalid && (shippingAddressZipCode.dirty || shippingAddressZipCode.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"shippingAddressZipCode.errors.required || shippingAddressZipCode.errors.notOnlyWhitespace\">\n                                        Zip code is required\n                                    </div>\n                                    <div *ngIf=\"shippingAddressZipCode.errors.minlength\">\n                                        Zip code must be at least 2 characters long\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n\n                <!-- Add check box to copy shipping to billing -->\n                <div class=\"input-space\">\n                    <label class=\"au-checkbox\">\n                        <input type=\"checkbox\" (change)=\"copyShippingAddressToBillingAddress($event)\">\n                        <span class=\"au-checkmark\"></span>Billing Address same as Shipping Address\n                    </label>\n                </div>\n\n\n                <!-- Billing Address -->\n                <div formGroupName=\"billingAddress\" class=\"form-area\">\n                    <h3>Billing Address</h3>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>Country</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <select formControlName=\"country\" (change)=\"getStates('billingAddress')\">\n                                    <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n                                        {{ country.name }}\n                                    </option>\n                                </select>\n\n                                <div *ngIf=\"billingAddressCountry.invalid && (billingAddressCountry.dirty || billingAddressCountry.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"billingAddressCountry.errors.required\">\n                                        Country is required\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>Street</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <input formControlName=\"street\" type=\"text\">\n\n                                <div *ngIf=\"billingAddressStreet.invalid && (billingAddressStreet.dirty || billingAddressStreet.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"billingAddressStreet.errors.required || billingAddressStreet.errors.notOnlyWhitespace\">\n                                        Street is required\n                                    </div>\n                                    <div *ngIf=\"billingAddressStreet.errors.minlength\">\n                                        Street must be at least 2 characters long\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>City</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <input formControlName=\"city\" type=\"text\">\n\n                                <div *ngIf=\"billingAddressCity.invalid && (billingAddressCity.dirty || billingAddressCity.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"billingAddressCity.errors.required || billingAddressCity.errors.notOnlyWhitespace\">\n                                        City is required\n                                    </div>\n                                    <div *ngIf=\"billingAddressCity.errors.minlength\">\n                                        City must be at least 2 characters long\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>State</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <select formControlName=\"state\">\n                                    <option *ngFor=\"let state of billingAddressStates\" [ngValue]=\"state\">\n                                        {{ state.name }}\n                                    </option>\n                                </select>\n\n                                <div *ngIf=\"billingAddressState.invalid && (billingAddressState.dirty || billingAddressState.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"billingAddressState.errors.required\">\n                                        State is required\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>Zip Code</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <input formControlName=\"zipCode\" type=\"text\">\n\n                                <div *ngIf=\"billingAddressZipCode.invalid && (billingAddressZipCode.dirty || billingAddressZipCode.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"billingAddressZipCode.errors.required || billingAddressZipCode.errors.notOnlyWhitespace\">\n                                        Zip code is required\n                                    </div>\n\n                                    <div *ngIf=\"billingAddressZipCode.errors.minlength\">\n                                        Zip code must be at least 2 characters long\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n\n                <!-- Credit Card -->\n                <div formGroupName=\"creditCard\" class=\"form-area\">\n                    <h3>Credit Card</h3>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>Card Type</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <select formControlName=\"cardType\">\n                                    <option>Visa</option>\n                                    <option>Mastercard</option>\n                                </select>\n\n                                <div *ngIf=\"creditCardType.invalid && (creditCardType.dirty || creditCardType.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"creditCardType.errors.required\">\n                                        Credit card type is required\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>Name on Card</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <input formControlName=\"nameOnCard\" type=\"text\">\n\n                                <div *ngIf=\"creditCardNameOnCard.invalid && (creditCardNameOnCard.dirty || creditCardNameOnCard.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"creditCardNameOnCard.errors.required || creditCardNameOnCard.errors.notOnlyWhitespace\">\n                                        Name is required\n                                    </div>\n\n                                    <div *ngIf=\"creditCardNameOnCard.errors.minlength\">\n                                        Name must be at least 2 characters long\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>Card Number</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <input formControlName=\"cardNumber\" type=\"text\">\n\n                                <div *ngIf=\"creditCardNumber.invalid && (creditCardNumber.dirty || creditCardNumber.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"creditCardNumber.errors.required\">\n                                        Card number is required\n                                    </div>\n                                    <div *ngIf=\"creditCardNumber.errors.pattern\">\n                                        Card number must be 16 digits long\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>Security Code</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <input formControlName=\"securityCode\" type=\"text\">\n\n                                <div *ngIf=\"creditCardSecurityCode.invalid && (creditCardSecurityCode.dirty || creditCardSecurityCode.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"creditCardSecurityCode.errors.required\">\n                                        Security code is required\n                                    </div>\n                                    <div *ngIf=\"creditCardSecurityCode.errors.pattern\">\n                                        Security code must be 3 digits long\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>Expiration Month</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <select formControlName=\"expirationMonth\">\n                                    <option *ngFor=\"let month of creditCardMonths\">\n                                        {{ month }}\n                                    </option>\n                                </select>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>Expiration Year</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <select formControlName=\"expirationYear\" (change)=\"handleMonthsAndYears()\">\n                                    <option *ngFor=\"let year of creditCardYears\">\n                                        {{ year }}\n                                    </option>\n                                </select>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n\n                <!-- Order details -->\n                <div class=\"form-area\">\n                    <h3>Review Your Order</h3>\n\n                    <p>Total Quantity: {{ totalQuantity }}</p>\n                    <p>Shipping: FREE</p>\n                    <p>Total Price: {{ totalPrice | currency: 'USD' }}</p>\n                </div>\n\n                <!-- submit button-->\n                <div class=\"text-center\">\n                    <button type=\"submit\" class=\"btn btn-info\">Purchase</button>\n                </div>\n\n            </form>\n\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-search',\n  templateUrl: './search.component.html',\n  styleUrls: ['./search.component.css']\n})\nexport class SearchComponent implements OnInit {\n\n  constructor(private router: Router) { }\n\n  ngOnInit() {\n  }\n\n  doSearch(value: string) {\n    console.log(`value=${value}`);\n    this.router.navigateByUrl(`/search/${value}`);\n  }\n}\n","<div class=\"form-header\">\n\n    <input #myInput type=\"text\" \n           placeholder=\"Search for products ...\"\n           class=\"au-input au-input-xl\"\n           (keyup.enter)=\"doSearch(myInput.value)\"  />\n\n    <button (click)=\"doSearch(myInput.value)\" class=\"au-btn-submit\">\n        Search\n    </button>\n\n</div>","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Purchase } from '../common/purchase';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CheckoutService {\n\n  private purchaseUrl = 'http://localhost:8080/api/checkout/purchase';\n\n  constructor(private httpClient: HttpClient) { }\n\n  placeOrder(purchase: Purchase): Observable<any> {\n    return this.httpClient.post<Purchase>(this.purchaseUrl, purchase);    \n  }\n  \n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'angular-ecommerce';\n}\n","<div class=\"page-wrapper\">\n\n  <!-- MENU SIDEBAR-->\n  <aside class=\"menu-sidebar d-none d-lg-block\">\n    <div class=\"logo\">\n      <a routerLink=\"/products\">\n        <img src=\"assets/images/logo.png\" alt=\"luv2shop\" class=\"img-responsive\">\n      </a>\n    </div>\n\n    <app-product-category-menu></app-product-category-menu>\n\n  </aside>\n  <!-- END MENU SIDEBAR-->\n\n  <div class=\"page-container\">\n    <!-- HEADER DESKTOP-->\n    <header class=\"header-desktop\">\n      <div class=\"section-content section-content-p30\">\n        <div class=\"container-fluid\">\n          <div class=\"header-wrap\">\n\n            <app-search></app-search>\n \n            <app-cart-status></app-cart-status>\n\n          </div>\n          <div class=\"account-wrap\"></div>\n        </div>\n      </div>\n    </header>\n    <!-- END HEADER DESKTOP-->\n\n    <!-- MAIN CONTENT-->\n    <router-outlet></router-outlet>\n\n  </div>\n</div>\n\n<!-- ENDS PAGE CONTAINER -->\n\n<footer>\n  <ul>\n    <li><a href=\"#\">About Us</a></li>\n    <li><a href=\"#\">Contact Us</a></li>\n    <li><a href=\"#\">Help</a></li>\n  </ul>\n</footer>","export class Product {\n    id: string;\n    sku: string;\n    name: string;\n    description: string;\n    unitPrice: number;\n    imageUrl: string;\n    active: boolean;\n    unitsInStock: number;\n    dateCreated: Date;\n    lastUpdate: Date;\n}\n","import { CartItem } from './cart-item';\n\nexport class OrderItem {\n    imageUrl: string;\n    unitPrice: number;\n    quantity: number;\n    productId: string;\n\n    constructor(cartItem: CartItem) {\n        this.imageUrl = cartItem.imageUrl;\n        this.quantity = cartItem.quantity;\n        this.unitPrice = cartItem.unitPrice;\n        this.productId = cartItem.id;\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { CartService } from 'src/app/services/cart.service';\n\n@Component({\n  selector: 'app-cart-status',\n  templateUrl: './cart-status.component.html',\n  styleUrls: ['./cart-status.component.css']\n})\nexport class CartStatusComponent implements OnInit {\n\n  totalPrice: number = 0.00;\n  totalQuantity: number = 0;\n\n  constructor(private cartService: CartService) { }\n\n  ngOnInit(): void {\n    this.updateCartStatus();\n  }\n\n  updateCartStatus() {\n\n    // subscribe to the cart totalPrice\n    this.cartService.totalPrice.subscribe(\n      data => this.totalPrice = data\n    );\n\n    // subscribe to the cart totalQuantity\n    this.cartService.totalQuantity.subscribe(\n      data => this.totalQuantity = data\n    );\n\n  }\n\n}\n","<div class=\"cart-area d-n\">\n    <a routerLink=\"/cart-details\">\n        <div class=\"total\">{{ totalPrice | currency: 'USD' }}\n            <span>{{ totalQuantity }}</span> \n        </div> \n        <i class=\"fa fa-shopping-cart\" aria-hidden=\"true\"></i>\n    </a>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { ProductListComponent } from './components/product-list/product-list.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ProductService } from './services/product.service';\n\nimport { Routes, RouterModule} from '@angular/router';\nimport { ProductCategoryMenuComponent } from './components/product-category-menu/product-category-menu.component';\nimport { SearchComponent } from './components/search/search.component';\nimport { ProductDetailsComponent } from './components/product-details/product-details.component';\n\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartStatusComponent } from './components/cart-status/cart-status.component';\nimport { CartDetailsComponent } from './components/cart-details/cart-details.component';\nimport { CheckoutComponent } from './components/checkout/checkout.component';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nconst routes: Routes = [\n  {path: 'checkout', component: CheckoutComponent},\n  {path: 'cart-details', component: CartDetailsComponent},\n  {path: 'products/:id', component: ProductDetailsComponent},\n  {path: 'search/:keyword', component: ProductListComponent},\n  {path: 'category/:id', component: ProductListComponent},\n  {path: 'category', component: ProductListComponent},\n  {path: 'products', component: ProductListComponent},\n  {path: '', redirectTo: '/products', pathMatch: 'full'},\n  {path: '**', redirectTo: '/products', pathMatch: 'full'}\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ProductListComponent,\n    ProductCategoryMenuComponent,\n    SearchComponent,\n    ProductDetailsComponent,\n    CartStatusComponent,\n    CartDetailsComponent,\n    CheckoutComponent\n  ],\n  imports: [\n    RouterModule.forRoot(routes),\n    BrowserModule,\n    HttpClientModule,\n    NgbModule,\n    ReactiveFormsModule\n  ],\n  providers: [ProductService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { ProductCategory } from 'src/app/common/product-category';\nimport { ProductService } from 'src/app/services/product.service';\n\n@Component({\n  selector: 'app-product-category-menu',\n  templateUrl: './product-category-menu.component.html',\n  styleUrls: ['./product-category-menu.component.css']\n})\nexport class ProductCategoryMenuComponent implements OnInit {\n\n  productCategories: ProductCategory[];\n  \n  constructor(private productService: ProductService) { }\n\n  ngOnInit() {\n    this.listProductCategories();\n  }\n\n  listProductCategories() {\n\n    this.productService.getProductCategories().subscribe(\n      data => {\n        console.log('Product Categories=' + JSON.stringify(data));\n        this.productCategories = data;\n      }\n    );\n  }\n\n}\n","<div class=\"menu-sidebar-content js-scrollbar1\">\n    <nav class=\"navbar-sidebar\">\n        <ul class=\"list-unstyled navbar-list\">\n\n            <li *ngFor=\"let tempProductCategory of productCategories\">\n\n                <a routerLink=\"/category/{{ tempProductCategory.id }}\" routerLinkActive=\"active-link\">\n                    {{ tempProductCategory.categoryName }}\n                </a>\n\n            </li>\n        \n        </ul>\n    </nav>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Product } from 'src/app/common/product';\nimport { ProductService } from 'src/app/services/product.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { CartService } from 'src/app/services/cart.service';\nimport { CartItem } from 'src/app/common/cart-item';\n\n@Component({\n  selector: 'app-product-details',\n  templateUrl: './product-details.component.html',\n  styleUrls: ['./product-details.component.css']\n})\nexport class ProductDetailsComponent implements OnInit {\n\n  product: Product = new Product();\n\n  constructor(private productService: ProductService,\n              private cartService: CartService,\n              private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.route.paramMap.subscribe(() => {\n      this.handleProductDetails();\n    })\n  }\n\n  handleProductDetails() {\n\n    // get the \"id\" param string. convert string to a number using the \"+\" symbol\n    const theProductId: number = +this.route.snapshot.paramMap.get('id');\n\n    this.productService.getProduct(theProductId).subscribe(\n      data => {\n        this.product = data;\n      }\n    )\n  }\n\n  addToCart() {\n\n    console.log(`Adding to cart: ${this.product.name}, ${this.product.unitPrice}`);\n    const theCartItem = new CartItem(this.product);\n    this.cartService.addToCart(theCartItem);\n    \n  }\n\n}\n","<div class=\"detail-section\">\n    <div class=\"container-fluid\">\n\n        <img src=\"{{ product.imageUrl }}\" class=\"detail-img\">\n\n        <h3>{{ product.name }}</h3>\n        <div class=\"price\">{{ product.unitPrice | currency:'USD' }}</div>\n        <button (click)=\"addToCart()\" class=\"btn btn-primary btn-sm\">Add to cart</button>\n\n        <hr>\n        <h4>Description</h4>\n        <p>{{ product.description }}</p>\n\n        <a routerLink=\"/products\" class=\"mt-5\">Back to Product List</a>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\r\nimport { ProductService } from 'src/app/services/product.service';\r\nimport { Product } from 'src/app/common/product';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { timeoutWith } from 'rxjs/operators';\r\nimport { CartItem } from 'src/app/common/cart-item';\r\nimport { CartService } from 'src/app/services/cart.service';\r\n\r\n@Component({\r\n  selector: 'app-product-list',\r\n  templateUrl: './product-list-grid.component.html',\r\n  styleUrls: ['./product-list.component.css']\r\n})\r\nexport class ProductListComponent implements OnInit {\r\n\r\n  products: Product[] = [];\r\n  currentCategoryId: number = 1;\r\n  previousCategoryId: number = 1;\r\n  searchMode: boolean = false;\r\n\r\n  // new properties for pagination\r\n  thePageNumber: number = 1;\r\n  thePageSize: number = 5;\r\n  theTotalElements: number = 0;\r\n\r\n  previousKeyword: string = null;\r\n\r\n  constructor(private productService: ProductService,\r\n              private cartService: CartService,\r\n              private route: ActivatedRoute) { }\r\n\r\n  ngOnInit() {\r\n    this.route.paramMap.subscribe(() => {\r\n      this.listProducts();\r\n    });\r\n  }\r\n\r\n  listProducts() {\r\n\r\n    this.searchMode = this.route.snapshot.paramMap.has('keyword');\r\n\r\n    if (this.searchMode) {\r\n      this.handleSearchProducts();\r\n    }\r\n    else {\r\n      this.handleListProducts();\r\n    }\r\n\r\n  }\r\n\r\n  handleSearchProducts() {\r\n\r\n    const theKeyword: string = this.route.snapshot.paramMap.get('keyword');\r\n\r\n    // if we have a different keyword than previous\r\n    // then set thePageNumber to 1\r\n\r\n    if (this.previousKeyword != theKeyword) {\r\n      this.thePageNumber = 1;\r\n    }\r\n\r\n    this.previousKeyword = theKeyword;\r\n\r\n    console.log(`keyword=${theKeyword}, thePageNumber=${this.thePageNumber}`);\r\n\r\n    // now search for the products using keyword\r\n    this.productService.searchProductsPaginate(this.thePageNumber - 1,\r\n                                               this.thePageSize,\r\n                                               theKeyword).subscribe(this.processResult());\r\n                                               \r\n  }\r\n\r\n  handleListProducts() {\r\n\r\n    // check if \"id\" parameter is available\r\n    const hasCategoryId: boolean = this.route.snapshot.paramMap.has('id');\r\n\r\n    if (hasCategoryId) {\r\n      // get the \"id\" param string. convert string to a number using the \"+\" symbol\r\n      this.currentCategoryId = +this.route.snapshot.paramMap.get('id');\r\n    }\r\n    else {\r\n      // not category id available ... default to category id 1\r\n      this.currentCategoryId = 1;\r\n    }\r\n\r\n    //\r\n    // Check if we have a different category than previous\r\n    // Note: Angular will reuse a component if it is currently being viewed\r\n    //\r\n\r\n    // if we have a different category id than previous\r\n    // then set thePageNumber back to 1\r\n    if (this.previousCategoryId != this.currentCategoryId) {\r\n      this.thePageNumber = 1;\r\n    }\r\n\r\n    this.previousCategoryId = this.currentCategoryId;\r\n\r\n    console.log(`currentCategoryId=${this.currentCategoryId}, thePageNumber=${this.thePageNumber}`);\r\n\r\n    // now get the products for the given category id\r\n    this.productService.getProductListPaginate(this.thePageNumber - 1,\r\n                                               this.thePageSize,\r\n                                               this.currentCategoryId)\r\n                                               .subscribe(this.processResult());\r\n  }\r\n\r\n  processResult() {\r\n    return data => {\r\n      this.products = data._embedded.products;\r\n      this.thePageNumber = data.page.number + 1;\r\n      this.thePageSize = data.page.size;\r\n      this.theTotalElements = data.page.totalElements;\r\n    };\r\n  }\r\n\r\n  updatePageSize(pageSize: number) {\r\n    this.thePageSize = pageSize;\r\n    this.thePageNumber = 1;\r\n    this.listProducts();\r\n  }\r\n\r\n  addToCart(theProduct: Product) {\r\n    \r\n    console.log(`Adding to cart: ${theProduct.name}, ${theProduct.unitPrice}`);\r\n\r\n    // TODO ... do the real work\r\n    const theCartItem = new CartItem(theProduct);\r\n\r\n    this.cartService.addToCart(theCartItem);\r\n  }\r\n\r\n}\r\n","<div class=\"main-content\">\n    <div class=\"section-content section-content-p30\">\n        <div class=\"container-fluid\">\n            <div class=\"row\">\n\n                <!-- loop over the collection of products -->\n                <div *ngFor=\"let tempProduct of products\" class=\"col-md-3\">\n\n                    <div class=\"product-box\">\n\n                        <a routerLink=\"/products/{{ tempProduct.id }}\">\n                            <img src=\"{{ tempProduct.imageUrl }}\" class=\"img-responsive\">\n                        </a>\n\n                        <a routerLink=\"/products/{{ tempProduct.id }}\">\n                            <h1>{{ tempProduct.name }}</h1>\n                        </a>\n                        \n                        <div class=\"price\">{{ tempProduct.unitPrice | currency:'USD' }}</div>\n                        <button (click)=\"addToCart(tempProduct)\" class=\"btn btn-primary btn-sm\">Add to cart</button>\n                    </div>\n\n                </div>\n\n                <!-- if products empty then display a message-->\n                <div *ngIf=\"products?.length == 0\" class=\"alert alert-warning col-md-12\" role=\"alert\">\n                    No products found.\n                </div>\n\n            </div>\n\n            <!-- begin footer -->\n            <div class=\"footer-pagination\">\n                <div class=\"row\">\n                    <div class=\"col-md-6\"></div>\n\n                    <div class=\"col-md-6\">\n                        <div class=\"row\">\n                            <div class=\"col-md-9\" style=\"padding-left: 30%\">\n                            \n                                <ngb-pagination [(page)]=\"thePageNumber\"\n                                                [pageSize]=\"thePageSize\"\n                                                [collectionSize]=\"theTotalElements\"\n                                                [maxSize]=\"5\"\n                                                [boundaryLinks]=\"true\"\n                                                (pageChange)=\"listProducts()\">\n\n                                </ngb-pagination>\n\n                            </div>\n\n                            <div class=\"col-md-3 mt-2\" style=\"text-align: right;\">\n                                <span class=\"mr-2\">Page Size</span>\n\n                                <select (change)=\"updatePageSize($event.target.value)\">\n                                    <option>2</option>\n                                    <option selected=\"true\">5</option>\n                                    <option>10</option>\n                                    <option>20</option>\n                                    <option>50</option>\n                                </select>\n                            </div>\n\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n            <!-- end footer -->\n\n        </div>\n    </div>\n</div>\n\n\n\n\n\n\n","import { Injectable } from '@angular/core';\nimport { CartItem } from '../common/cart-item';\nimport { BehaviorSubject, Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n\n  cartItems: CartItem[] = [];\n\n  totalPrice: Subject<number> = new BehaviorSubject<number>(0);\n  totalQuantity: Subject<number> = new BehaviorSubject<number>(0);\n\n  constructor() { }\n\n  addToCart(theCartItem: CartItem) {\n\n    // check if we already have the item in our cart\n    let alreadyExistsInCart: boolean = false;\n    let existingCartItem: CartItem = undefined;\n\n    if (this.cartItems.length > 0) {\n      // find the item in the cart based on item id\n\n      existingCartItem = this.cartItems.find( tempCartItem => tempCartItem.id === theCartItem.id );\n\n      // check if we found it\n      alreadyExistsInCart = (existingCartItem != undefined);\n    }\n\n    if (alreadyExistsInCart) {\n      // increment the quantity\n      existingCartItem.quantity++;\n    }\n    else {\n      // just add the item to the array\n      this.cartItems.push(theCartItem);\n    }\n\n    // compute cart total price and total quantity\n    this.computeCartTotals();\n  }\n\n  computeCartTotals() {\n\n    let totalPriceValue: number = 0;\n    let totalQuantityValue: number = 0;\n\n    for (let currentCartItem of this.cartItems) {\n      totalPriceValue += currentCartItem.quantity * currentCartItem.unitPrice;\n      totalQuantityValue += currentCartItem.quantity;\n    }\n\n    // publish the new values ... all subscribers will receive the new data\n    this.totalPrice.next(totalPriceValue);\n    this.totalQuantity.next(totalQuantityValue);\n\n    // log cart data just for debugging purposes\n    this.logCartData(totalPriceValue, totalQuantityValue);\n  }\n\n  logCartData(totalPriceValue: number, totalQuantityValue: number) {\n\n    console.log('Contents of the cart');\n    for (let tempCartItem of this.cartItems) {\n      const subTotalPrice = tempCartItem.quantity * tempCartItem.unitPrice;\n      console.log(`name: ${tempCartItem.name}, quantity=${tempCartItem.quantity}, unitPrice=${tempCartItem.unitPrice}, subTotalPrice=${subTotalPrice}`);\n    }\n\n    console.log(`totalPrice: ${totalPriceValue.toFixed(2)}, totalQuantity: ${totalQuantityValue}`);\n    console.log('----');\n  }\n\n  decrementQuantity(theCartItem: CartItem) {\n\n    theCartItem.quantity--;\n\n    if (theCartItem.quantity === 0) {\n      this.remove(theCartItem);\n    }\n    else {\n      this.computeCartTotals();\n    }\n  }\n\n  remove(theCartItem: CartItem) {\n\n    // get index of item in the array\n    const itemIndex = this.cartItems.findIndex( tempCartItem => tempCartItem.id === theCartItem.id );\n\n    // if found, remove the item from the array at the given index\n    if (itemIndex > -1) {\n      this.cartItems.splice(itemIndex, 1);\n\n      this.computeCartTotals();\n    }\n  }\n\n}\n","import { FormControl, ValidationErrors } from '@angular/forms';\n\nexport class Luv2ShopValidators {\n\n    // whitespace validation\n    static notOnlyWhitespace(control: FormControl) : ValidationErrors {\n        \n        // check if string only contains whitespace\n        if ((control.value != null) && (control.value.trim().length === 0)) {\n\n            // invalid, return error object\n            return { 'notOnlyWhitespace': true };\n        }\n        else {\n            // valid, return null\n            return null;\n        }\n    }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}